# to be called by another makefile
# e.g. make -C simple -f ../makefile_local.gnu PREFIX=simple clean


ifeq ($(VC_AVAILABLE), yes)
	conditional_simd_class_vc_x = $(PREFIX)_simd_class_vc.x
else
	conditional_simd_class_vc_x = $()
endif

ifeq ($(VCL_AVAILABLE), yes)
	conditional_simd_class_vcl_x = $(PREFIX)_simd_class_vcl.x 
else
	conditional_simd_class_vcl_x = $()
endif

ifeq ($(UMESIMD_AVAILABLE), yes)
	conditional_simd_class_umesimd_x = $(PREFIX)_simd_class_umesimd.x 
else
	conditional_simd_class_umesimd_x = $()
endif

all : $(PREFIX)_reference.x $(PREFIX)_explicit_vectorization.x $(PREFIX)_enhanced_explicit_vectorization.x $(PREFIX)_intrinsics.x $(conditional_simd_class_vc_x) $(conditional_simd_class_vcl_x) $(conditional_simd_class_umesimd_x)
	rm -f $(PREFIX)_*.o
	
$(PREFIX)_reference.x : $(PREFIX)_kernel_reference.o
	$(CXX) $(CXXFLAGS) -o $@_benchmark.o -c $(SRC_DIR)/common/benchmark.cpp
	$(CXX) $(CXXFLAGS) -o $@_benchmark.asm -S $(SRC_DIR)/common/benchmark.cpp
	$(LD) -o $@ $? $@_benchmark.o $(LDFLAGS)

$(PREFIX)_explicit_vectorization.x : $(PREFIX)_kernel_explicit_vectorization.o $(PREFIX)_kernel_reference.o
	$(CXX) $(CXXFLAGS) -DEXPLICIT_VECTORIZATION -o $@_benchmark.o -c $(SRC_DIR)/common/benchmark.cpp
	$(LD) -o $@ $? $@_benchmark.o $(LDFLAGS)

$(PREFIX)_enhanced_explicit_vectorization.x : $(PREFIX)_kernel_enhanced_explicit_vectorization.o $(PREFIX)_kernel_reference.o
	$(CXX) $(CXXFLAGS) -DENHANCED_EXPLICIT_VECTORIZATION -o $@_benchmark.o -c $(SRC_DIR)/common/benchmark.cpp
	$(LD) -o $@ $? $@_benchmark.o $(LDFLAGS)

$(PREFIX)_intrinsics.x : $(PREFIX)_kernel_intrinsics.o $(PREFIX)_kernel_reference.o
	$(CXX) $(CXXFLAGS) -DINTRINSICS -o $@_benchmark.o -c $(SRC_DIR)/common/benchmark.cpp
	$(LD) -o $@ $? $@_benchmark.o $(LDFLAGS)

$(PREFIX)_simd_class_vc.x : $(PREFIX)_kernel_simd_class_vc.o $(PREFIX)_kernel_reference.o
	$(CXX) $(CXXFLAGS) -DSIMD_CLASS_VC -I$(VC_ROOT)/include -o $@_benchmark.o -c $(SRC_DIR)/common/benchmark.cpp
ifeq ($(PLATFORM), mic)
	$(LD) -o $@ $? $@_benchmark.o $(LDFLAGS) $(VC_ROOT)/lib/libVc_MIC.a
else
	$(LD) -o $@ $? $@_benchmark.o $(LDFLAGS) $(VC_ROOT)/lib/libVc.a
endif

$(PREFIX)_simd_class_vcl.x : $(PREFIX)_kernel_simd_class_vcl.o $(PREFIX)_kernel_reference.o
	$(CXX) $(CXXFLAGS) -DSIMD_CLASS_VCL -I$(VCL_ROOT) -o $@_benchmark.o -c $(SRC_DIR)/common/benchmark.cpp
	$(LD) -o $@ $? $@_benchmark.o $(LDFLAGS)

$(PREFIX)_simd_class_umesimd.x : $(PREFIX)_kernel_simd_class_umesimd.o $(PREFIX)_kernel_reference.o
	$(CXX) $(CXXFLAGS) -DSIMD_CLASS_UMESIMD -I$(UMESIMD_ROOT) -o $@_benchmark.o -c $(SRC_DIR)/common/benchmark.cpp
	$(LD) -o $@ $? $@_benchmark.o $(LDFLAGS)


$(PREFIX)_kernel_reference.o : kernel_reference.cpp
	$(CXX) $(CXXFLAGS_KERNEL) -o $@ -c $<
#	$(CXX) $(CXXFLAGS_KERNEL) -o $@.asm -S $<

$(PREFIX)_kernel_explicit_vectorization.o : kernel_explicit_vectorization.cpp
	$(CXX) $(CXXFLAGS_KERNEL) -DEXPLICIT_VECTORIZATION -o $@ -c $<
#	$(CXX) $(CXXFLAGS_KERNEL) -DEXPLICIT_VECTORIZATION -o $@.asm -S $<

$(PREFIX)_kernel_enhanced_explicit_vectorization.o : kernel_enhanced_explicit_vectorization.cpp
	$(CXX) $(CXXFLAGS_KERNEL) -DENHANCED_EXPLICIT_VECTORIZATION -o $@ -c $<
#	$(CXX) $(CXXFLAGS_KERNEL) -DENHANCED_EXPLICIT_VECTORIZATION -o $@.asm -S $<

$(PREFIX)_kernel_intrinsics.o : kernel_intrinsics.cpp
	$(CXX) $(CXXFLAGS_KERNEL) -DINTRINSICS -o $@ -c $<
#	$(CXX) $(CXXFLAGS_KERNEL) -DINTRINSICS -o $@.asm -S $<

$(PREFIX)_kernel_simd_class_vc.o : kernel_simd_class_vc.cpp
	$(CXX) $(CXXFLAGS_KERNEL) -DSIMD_CLASS_VC -I$(VC_ROOT)/include -o $@ -c $<
#	$(CXX) $(CXXFLAGS_KERNEL) -DSIMD_CLASS_VC -I$(VC_ROOT)/include -o $@.asm -S $<

$(PREFIX)_kernel_simd_class_umesimd.o : kernel_simd_class_umesimd.cpp
	$(CXX) $(CXXFLAGS_KERNEL) -DSIMD_CLASS_UMESIMD -I$(UMESIMD_ROOT) -o $@ -c $<
#	$(CXX) $(CXXFLAGS_KERNEL) -DSIMD_CLASS_UMESIMD -I$(UMESIMD_ROOT) -o $@.asm -S $<

$(PREFIX)_kernel_simd_class_vcl.o : kernel_simd_class_vcl.cpp
	$(CXX) $(CXXFLAGS_KERNEL) -DSIMD_CLASS_VCL -I$(VCL_ROOT) -o $@ -c $<
#	$(CXX) $(CXXFLAGS_KERNEL) -DSIMD_CLASS_VCL -I$(VCL_ROOT) -o $@.asm -S $<

clean :
	rm -f *.o *.x
